import os
import streamlit as st
import shutil  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è shutil –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
import sys  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç sys –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—É—Ç–∏ –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É Python
import zipfile # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–æ–≤
from io import BytesIO # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –±—É—Ñ–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏
import subprocess  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è subprocess –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit)
st.set_page_config(
    page_title="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä",
    page_icon="üé§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
if 'last_processed_dir' not in st.session_state:
    st.session_state.last_processed_dir = None
if 'processed_dirs' not in st.session_state:
    st.session_state.processed_dirs = []
if 'process_completed' not in st.session_state:
    st.session_state.process_completed = False

import openai
import tempfile
import time
import re
import markdown
from pathlib import Path
from dotenv import load_dotenv
import utils
from utils import (
    transcribe_audio_whisper, audio_info,
    format_text, split_markdown_text, process_documents,
    num_tokens_from_string, split_text, process_text_chunks,
    save_text_to_docx, markdown_to_docx, setup_ffmpeg_path
)
from youtube_service import YouTubeDownloader
from gdrive_service import GoogleDriveDownloader
from instagram_service import InstagramDownloader
from yandex_disk_service import YandexDiskDownloader
from vk_video_service import VKVideoDownloader
import platform

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ Streamlit Secrets
if 'OPENAI_API_KEY' in st.secrets:
    openai.api_key = st.secrets['OPENAI_API_KEY']
else:
    st.error("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Streamlit Secrets. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Streamlit Cloud.")
    st.stop()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è –æ–±–ª–∞–∫–∞)
TEMP_DIR = os.path.join("/tmp", "transcriptor_temp")
TRANSCRIPTIONS_DIR = os.path.join(TEMP_DIR, "transcriptions")  # –î–ª—è –∫–æ–Ω–µ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_FILES_DIR = os.path.join(TEMP_DIR, "temp_files")  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
AUDIO_FILES_DIR = os.path.join(TEMP_DIR, "audio_files")  # –î–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
MARKDOWN_DIR = os.path.join(TEMP_DIR, "markdown")  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è markdown —Ñ–∞–π–ª–æ–≤

# –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
for dir_path in [TRANSCRIPTIONS_DIR, TEMP_FILES_DIR, AUDIO_FILES_DIR, MARKDOWN_DIR]:
    os.makedirs(dir_path, exist_ok=True)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è FFmpeg
setup_ffmpeg_path()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å FFmpeg
try:
    subprocess.run([os.environ["FFMPEG_BINARY"], "-version"], capture_output=True, text=True, check=True)
    st.sidebar.success("FFmpeg —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FFmpeg: {str(e)}")
    st.stop()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
def get_language_instruction(target_language):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    """
    if target_language.lower() == "–∫–∞–∑–∞—Ö—Å–∫–∏–π":
        return """–ë–ê–†–õ–´“ö –ú”ò–¢–Ü–ù–î–Ü –¢–ï–ö “ö–ê–ó–ê“ö –¢–Ü–õ–Ü–ù–î–ï –ñ–ê–ó–£ –ö–ï–†–ï–ö.
        –ë–∞—Å“õ–∞ —Ç—ñ–ª–¥–µ—Ä–¥—ñ “õ–æ–ª–¥–∞–Ω–±–∞“£—ã–∑.
        –¢–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä, –º”ô—Ç—ñ–Ω –º–∞–∑–º“±–Ω—ã, –±”©–ª—ñ–º–¥–µ—Ä - –±”ô—Ä—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.
        –û—Ä—ã—Å –Ω–µ–º–µ—Å–µ –∞“ì—ã–ª—à—ã–Ω —Å”©–∑–¥–µ—Ä—ñ–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä–º–∞“£—ã–∑."""
    elif target_language.lower() == "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π":
        return """ALL TEXT MUST BE WRITTEN ONLY IN ENGLISH.
        Do not use other languages.
        Headings, content, sections - everything should be in English.
        Do not mix in Russian or Kazakh words."""
    else:  # —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return """–í–ï–°–¨ –¢–ï–ö–°–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ù–ê–ü–ò–°–ê–ù –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.
        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏.
        –ó–∞–≥–æ–ª–æ–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª—ã - –≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        –ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Å –∫–∞–∑–∞—Ö—Å–∫–∏–º–∏ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
def create_download_buttons(file_dir):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ ZIP-–∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

    Args:
        file_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Ç–∞–º
    if file_dir not in st.session_state.processed_dirs and os.path.exists(file_dir):
        st.session_state.processed_dirs.append(file_dir)
        st.session_state.last_processed_dir = file_dir
        st.session_state.process_completed = True

    if not os.path.exists(file_dir):
        st.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ txt –∏ docx –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    files = [f for f in os.listdir(file_dir) if f.endswith((".txt", ".docx"))]

    if not files:
        st.info("–í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        return

    st.header("üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    cols = st.columns(2)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for i, file_name in enumerate(files):
        col_idx = i % 2  # –ß–µ—Ä–µ–¥—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        file_path = os.path.join(file_dir, file_name)
        unique_key = f"download_{os.path.basename(file_dir)}_{file_name}_{i}_{abs(hash(file_dir))}"

        try:
            with open(file_path, "rb") as file:
                file_bytes = file.read()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            mime_type = "text/plain" if file_name.endswith(".txt") else "application/vnd.openxmlformats-officedocument.wordprocessingml.document"

            with cols[col_idx]:
                st.download_button(
                    label=f"üì• –°–∫–∞—á–∞—Ç—å {file_name}",
                    data=file_bytes,
                    file_name=file_name,
                    mime=mime_type,
                    key=unique_key  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
                )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name} –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")

    # –°–æ–∑–¥–∞–µ–º ZIP-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏
    st.subheader("üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å—ë –∞—Ä—Ö–∏–≤–æ–º")

    try:
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏
        zip_buffer = BytesIO()

        with zipfile.ZipFile(zip_buffer, "w") as zip_file:
            for file_name in files:
                file_path = os.path.join(file_dir, file_name)
                zip_file.write(file_path, arcname=file_name)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏

        zip_buffer.seek(0)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

        zip_key = f"download_zip_{os.path.basename(file_dir)}_{len(files)}_{abs(hash(file_dir))}"
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)",
            data=zip_buffer,
            file_name=f"{os.path.basename(file_dir)}_results.zip",
            mime="application/zip",
            key=zip_key  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP-–∞—Ä—Ö–∏–≤–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
def create_handbook(text, save_path, original_filename, target_language="—Ä—É—Å—Å–∫–∏–π", save_txt=True, save_docx=True):
    st.write("### –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if original_filename.startswith("Conspect_"):
        original_filename = original_filename[len("Conspect_"):]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    md_text_path = os.path.join(TEMP_FILES_DIR, f"{original_filename}_processed_md_text.txt")
    handbook_path = os.path.join(TEMP_FILES_DIR, f"{original_filename}_summary_draft.txt")

    # –ü—É—Ç–∏ –∫ –∫–æ–Ω–µ—á–Ω—ã–º —Ñ–∞–π–ª–∞–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
    handbook_export_txt_path = os.path.join(save_path, f"Summary_{original_filename}.txt")
    handbook_export_docx_path = os.path.join(save_path, f"Summary_{original_filename}.docx")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    tokens = num_tokens_from_string(text)
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {tokens}")

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
    lang_instruction = get_language_instruction(target_language)

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã
    system_prompt = f"""–í—ã –≥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–∞, –ø–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
–∏ —Ä–∞–∑–±–∏—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ 100%. {lang_instruction}"""

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    user_prompt = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º: –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ
—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –∫–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Å–º—ã—Å–ª—É –º–æ–∂–Ω–æ –¥–∞—Ç—å –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É. –î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ –≤—Å–µ–º—É
–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ—Ç–≤–µ—Ç—É –∏ –æ—Ñ–æ—Ä–º–∏ –≤ –ø–æ—Ä—è–¥–∫–µ:
## –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É. {lang_instruction} –¢–µ–∫—Å—Ç:"""

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ª–∏–±–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º, –ª–∏–±–æ –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏
    md_processed_text = ""

    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã..."):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–±–æ–ª—å—à–æ–π (–º–µ–Ω–µ–µ 16–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
        if tokens < 16000:
            md_processed_text = utils.generate_answer(system_prompt, user_prompt, text)
        # –ò–Ω–∞—á–µ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
        else:
            st.write("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏...")
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
            text_chunks = split_text(text, chunk_size=30000, chunk_overlap=1000)
            st.write(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
            md_processed_text = process_text_chunks(text_chunks, system_prompt, user_prompt)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≤ txt —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    with open(md_text_path, "w", encoding="utf-8") as f:
        f.write(md_processed_text)

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≤ –ø–∞–ø–∫—É markdown –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    markdown_file_path = os.path.join(MARKDOWN_DIR, f"{original_filename}_processed_md_text.txt")
    shutil.copy2(md_text_path, markdown_file_path)
    st.success(f"–¢–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É markdown –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ä–∞–∑–±–∏—Ç—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    chunks_md_splits = split_markdown_text(md_processed_text)
    st.write("### –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:")
    for chunk in chunks_md_splits:
        try:
            if "Header 2" in chunk.metadata:
                st.write(f"- {chunk.metadata['Header 2']}")
        except:
            pass

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    system_prompt_handbook = f"""–¢—ã –≥–µ–Ω–∏–π –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–∞. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–∞–∑–¥–µ–ª –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–µ.
–ù—É–∂–Ω–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–µ–ª–∏—Ç—å —Å–∞–º—É—é —Å—É—Ç—å, —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –¥–µ—Ç–∞–ª–∏,
–Ω–æ —É–±—Ä–∞–≤ –≤—Å—é "–≤–æ–¥—É" –∏ —Å–ª–æ–≤–∞ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –Ω–µ –Ω–µ—Å—É—â–∏–µ —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
–û–ß–ï–ù–¨ –í–ê–ñ–ù–û: {lang_instruction}
–¢—ã –î–û–õ–ñ–ï–ù –ø–∏—Å–∞—Ç—å –í–ï–°–¨ —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –Ω–∞ {target_language} —è–∑—ã–∫–µ. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –≤–æ–æ–±—â–µ."""

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    user_prompt_handbook = f"""–ò–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—É—é –∏ —Ü–µ–Ω–Ω—É—é —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ç–µ–º—ã —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–£–¥–∞–ª–∏ –≤—Å—é "–≤–æ–¥—É". –í –∏—Ç–æ–≥–µ —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—Å—è —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ. –û–ø–∏—Ä–∞–π—Å—è
—Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ç–µ–±–µ —Ç–µ–∫—Å—Ç, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –û—Ç–≤–µ—Ç –Ω—É–∂–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
## –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞, –∏ –¥–∞–ª–µ–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–æ–±–æ–π —Ü–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–¥–∞—É–Ω-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤:
**–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤, *–∫—É—Ä—Å–∏–≤* –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π –∏ —Ç.–¥.

–û–ß–ï–ù–¨ –í–ê–ñ–ù–û: {lang_instruction}
–¢—ã –î–û–õ–ñ–ï–ù –ø–∏—Å–∞—Ç—å –í–ï–°–¨ —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –Ω–∞ {target_language} —è–∑—ã–∫–µ.
–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —è–∑—ã–∫, –∫—Ä–æ–º–µ {target_language}.

–í–µ—Å—å —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ {target_language} —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è."""

    with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤..."):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Ä–∞–∑–¥–µ–ª–∞) –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
        handbook_md_text = process_documents(
            TEMP_FILES_DIR,
            chunks_md_splits,
            system_prompt_handbook,
            user_prompt_handbook,
            original_filename,
            target_language
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    with open(handbook_path, "w", encoding="utf-8") as f:
        f.write(handbook_md_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
    if save_txt:
        with open(handbook_export_txt_path, "w", encoding="utf-8") as f:
            f.write(handbook_md_text)
        st.success(f"–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TXT: {handbook_export_txt_path}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ docx —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è
    if save_docx:
        markdown_to_docx(handbook_md_text, handbook_export_docx_path)
        st.success(f"–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DOCX: {handbook_export_docx_path}")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–∞", expanded=False):
        handbook_html = markdown.markdown(handbook_md_text)
        st.markdown(handbook_html, unsafe_allow_html=True)
        st.info("–î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    create_download_buttons(save_path)

    return handbook_md_text, md_processed_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def process_uploaded_file(uploaded_file, save_dir, file_name, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é transcription –∫–∞–∫ None
    transcription = None

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        tmp_file_path = tmp_file.name

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    file_dir = os.path.join(save_dir, file_name)
    os.makedirs(file_dir, exist_ok=True)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
        audio_data = audio_info(tmp_file_path)
        st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio_data.duration_seconds / 60:.2f} –º–∏–Ω.")
        st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio_data.frame_rate} –ì—Ü")
        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio_data.channels}")

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper API
        with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ..."):
            transcription, original_language = transcribe_audio_whisper(
                audio_path=tmp_file_path,
                file_title=file_name,
                save_folder_path=TEMP_FILES_DIR
            )

            if transcription:
                formatted_text = format_text(transcription)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                original_output_txt = os.path.join(file_dir, f"Original_{file_name}.txt")
                original_output_docx = os.path.join(file_dir, f"Original_{file_name}.docx")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                if save_txt:
                    with open(original_output_txt, "w", encoding="utf-8") as f:
                        f.write(formatted_text)
                    st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ TXT: {original_output_txt}")

                if save_docx:
                    save_text_to_docx(formatted_text, original_output_docx)
                    st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ DOCX: {original_output_docx}")

                st.success("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", expanded=False):
                    st.write(formatted_text)

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —è–∑—ã–∫, –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ
                if target_language:
                    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
                    lang_instruction = get_language_instruction(target_language)

                    st.write(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ {target_language}...")
                    with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ {target_language}..."):
                        system_prompt = f"""–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. {lang_instruction}"""
                        user_prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_language} —è–∑—ã–∫,
                        —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–º—ã—Å–ª, —Å—Ç–∏–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏–π –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.
                        –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. {lang_instruction}"""

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
                        tokens = num_tokens_from_string(formatted_text)
                        st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {tokens}")

                        translated_text = ""

                        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ª–∏–±–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º, –ª–∏–±–æ –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏
                        if tokens < 16000:
                            translated_text = utils.generate_answer(system_prompt, user_prompt, formatted_text)
                        else:
                            st.write("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞...")
                            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
                            text_chunks = split_text(formatted_text, chunk_size=30000, chunk_overlap=1000)
                            st.write(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π")
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                            translated_text = process_text_chunks(text_chunks, system_prompt, user_prompt)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    translated_output_txt = os.path.join(file_dir, f"{target_language}_{file_name}.txt")
                    translated_output_docx = os.path.join(file_dir, f"{target_language}_{file_name}.docx")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
                    if save_txt:
                        with open(translated_output_txt, "w", encoding="utf-8") as f:
                            f.write(translated_text)
                        st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ TXT: {translated_output_txt}")

                    if save_docx:
                        save_text_to_docx(translated_text, translated_output_docx)
                        st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DOCX: {translated_output_docx}")

                    st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language} –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    with st.expander(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ {target_language}", expanded=False):
                        st.write(translated_text)

                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç, –µ—Å–ª–∏ —ç—Ç–∞ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
                    if create_handbook_option:
                        handbook_text, md_processed_text = create_handbook(
                            translated_text, file_dir, file_name, target_language, save_txt, save_docx)
                        st.session_state.last_processed_dir = file_dir
                        st.session_state.process_completed = True
                        if file_dir not in st.session_state.processed_dirs:
                            st.session_state.processed_dirs.append(file_dir)
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
                        st.session_state.last_processed_dir = file_dir
                        st.session_state.process_completed = True
                        if file_dir not in st.session_state.processed_dirs:
                            st.session_state.processed_dirs.append(file_dir)
                        create_download_buttons(file_dir)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –æ—Ç Whisper API")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_file_path)

    return transcription, file_dir

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ
def process_youtube_video(url, save_path, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    downloader = YouTubeDownloader(output_dir=AUDIO_FILES_DIR)
    if not downloader.is_youtube_url(url):
        st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube –≤–∏–¥–µ–æ.")
        return None, None, None
    video_id = downloader.get_video_id(url) or "video"
    file_name = f"youtube_{video_id}"

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    file_dir = os.path.join(save_path, file_name)
    os.makedirs(file_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    st.session_state.last_processed_dir = file_dir
    st.session_state.processed_dirs.append(file_dir)

    progress_bar = st.progress(0)
    status_text = st.empty()
    def update_progress(percent, message):
        progress_bar.progress(int(percent) / 100)
        status_text.text(message)
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ YouTube –≤–∏–¥–µ–æ..."):
        audio_file = downloader.download_audio(
            url=url,
            output_filename=file_name,
            progress_callback=update_progress
        )
    if not audio_file:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ –∏–∑ YouTube –≤–∏–¥–µ–æ.")
        return None, None, None
    st.success(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio_file}")
    audio = audio_info(audio_file)
    st.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration_seconds / 60:.2f} –º–∏–Ω.")
    st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio.frame_rate} –ì—Ü")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio.channels}")
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é..."):
        start_time = time.time()
        transcription, original_language = transcribe_audio_whisper(
            audio_path=audio_file,
            file_title=file_name,
            save_folder_path=TEMP_FILES_DIR  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        )
        transcription = utils.format_transcription_paragraphs(transcription)
        elapsed_time = time.time() - start_time
    st.success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –ø–∞–ø–∫—É —Ñ–∞–π–ª–∞
    if save_txt:
        original_txt_path = os.path.join(file_dir, f"Original_{file_name}.txt")
        with open(original_txt_path, "w", encoding="utf-8") as f:
            f.write(transcription)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_txt_path}")

    if save_docx:
        original_docx_path = os.path.join(file_dir, f"Original_{file_name}.docx")
        save_text_to_docx(transcription, original_docx_path)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_docx_path}")

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    lang_map = {"—Ä—É—Å—Å–∫–∏–π": "ru", "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
    lang_code_to_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
                        "ja": "—è–ø–æ–Ω—Å–∫–∏–π", "zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π", "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
                        "de": "–Ω–µ–º–µ—Ü–∫–∏–π", "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    orig_lang_code = original_language.lower() if original_language else "unknown"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
    if orig_lang_code == "unknown" or orig_lang_code not in ["ru", "kk", "en", "ko", "ja", "zh"]:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        orig_lang_code = utils.detect_language(transcription)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
    target_lang_code = lang_map.get(target_language.lower(), "ru")

    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å —è–∑—ã–∫–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
    need_translate = orig_lang_code != target_lang_code
    translated_text = transcription  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    orig_lang_name = lang_code_to_name.get(orig_lang_code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({orig_lang_code})")
    st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {orig_lang_name}")

    if need_translate:
        with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å {orig_lang_name} –Ω–∞ {target_language}..."):
            translated_text = utils.translate_text_gpt(transcription, target_language)
        st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        st.info(f"–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ({orig_lang_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º ({target_language}). –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
    if save_txt:
        trans_txt_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.txt")
        with open(trans_txt_path, "w", encoding="utf-8") as f:
            f.write(translated_text)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_txt_path}")

    if save_docx:
        trans_docx_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.docx")
        save_text_to_docx(translated_text, trans_docx_path)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_docx_path}")

    # –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
    st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª", transcription, height=200)
    st.subheader(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {target_language.capitalize()}")
    st.text_area("–ü–µ—Ä–µ–≤–æ–¥", translated_text, height=200)

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
    handbook_text = None
    if create_handbook_option:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Conspect_"
        handbook_text, md_processed_text = create_handbook(translated_text, file_dir, file_name, target_language, save_txt, save_docx)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, handbook_text, md_processed_text
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        create_download_buttons(file_dir)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Instagram –≤–∏–¥–µ–æ
def process_instagram_video(url, save_path, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    downloader = InstagramDownloader(output_dir=AUDIO_FILES_DIR)
    if not downloader.is_instagram_url(url):
        st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Å—ã–ª–∫—É Instagram –≤–∏–¥–µ–æ.")
        return None, None, None
    shortcode = downloader.extract_shortcode(url) or "video"
    file_name = f"instagram_{shortcode}"

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    file_dir = os.path.join(save_path, file_name)
    os.makedirs(file_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    st.session_state.last_processed_dir = file_dir
    st.session_state.processed_dirs.append(file_dir)

    progress_bar = st.progress(0)
    status_text = st.empty()
    def update_progress(percent, message):
        progress_bar.progress(int(percent) / 100)
        status_text.text(message)
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ Instagram –≤–∏–¥–µ–æ..."):
        audio_file = downloader.download_audio(
            url=url,
            output_filename=file_name,
            progress_callback=update_progress
        )
    if not audio_file:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ –∏–∑ Instagram –≤–∏–¥–µ–æ.")
        return None, None, None
    st.success(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio_file}")
    audio = audio_info(audio_file)
    st.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration_seconds / 60:.2f} –º–∏–Ω.")
    st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio.frame_rate} –ì—Ü")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio.channels}")
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é..."):
        start_time = time.time()
        transcription, original_language = transcribe_audio_whisper(
            audio_path=audio_file,
            file_title=file_name,
            save_folder_path=TEMP_FILES_DIR  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        )
        transcription = utils.format_transcription_paragraphs(transcription)
        elapsed_time = time.time() - start_time
    st.success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –ø–∞–ø–∫—É —Ñ–∞–π–ª–∞
    if save_txt:
        original_txt_path = os.path.join(file_dir, f"Original_{file_name}.txt")
        with open(original_txt_path, "w", encoding="utf-8") as f:
            f.write(transcription)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_txt_path}")

    if save_docx:
        original_docx_path = os.path.join(file_dir, f"Original_{file_name}.docx")
        save_text_to_docx(transcription, original_docx_path)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_docx_path}")

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    lang_map = {"—Ä—É—Å—Å–∫–∏–π": "ru", "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
    lang_code_to_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
                        "ja": "—è–ø–æ–Ω—Å–∫–∏–π", "zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π", "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
                        "de": "–Ω–µ–º–µ—Ü–∫–∏–π", "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    orig_lang_code = original_language.lower() if original_language else "unknown"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
    if orig_lang_code == "unknown" or orig_lang_code not in ["ru", "kk", "en", "ko", "ja", "zh"]:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        orig_lang_code = utils.detect_language(transcription)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
    target_lang_code = lang_map.get(target_language.lower(), "ru")

    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å —è–∑—ã–∫–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
    need_translate = orig_lang_code != target_lang_code
    translated_text = transcription  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    orig_lang_name = lang_code_to_name.get(orig_lang_code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({orig_lang_code})")
    st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {orig_lang_name}")

    if need_translate:
        with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å {orig_lang_name} –Ω–∞ {target_language}..."):
            translated_text = utils.translate_text_gpt(transcription, target_language)
        st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        st.info(f"–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ({orig_lang_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º ({target_language}). –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
    if save_txt:
        trans_txt_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.txt")
        with open(trans_txt_path, "w", encoding="utf-8") as f:
            f.write(translated_text)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_txt_path}")

    if save_docx:
        trans_docx_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.docx")
        save_text_to_docx(translated_text, trans_docx_path)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_docx_path}")

    # –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
    st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª", transcription, height=200)
    st.subheader(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {target_language.capitalize()}")
    st.text_area("–ü–µ—Ä–µ–≤–æ–¥", translated_text, height=200)

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
    handbook_text = None
    if create_handbook_option:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Conspect_"
        handbook_text, md_processed_text = create_handbook(translated_text, file_dir, file_name, target_language, save_txt, save_docx)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, handbook_text, md_processed_text
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        create_download_buttons(file_dir)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞
def process_yandex_disk_files(url, save_path, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞

    Args:
        url: URL –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫ (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É)
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        save_txt: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ TXT
        save_docx: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DOCX
        create_handbook_option: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç

    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –∫–æ–Ω—Å–ø–µ–∫—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    """
    downloader = YandexDiskDownloader(output_dir=AUDIO_FILES_DIR)
    if not downloader.is_yandex_disk_url(url):
        st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫.")
        return None, None, None

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    progress_bar = st.progress(0)
    status_text = st.empty()

    def update_progress(percent, message):
        progress_bar.progress(int(percent) / 100)
        status_text.text(message)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞..."):
        downloaded_files = downloader.process_yandex_disk_url(url, progress_callback=update_progress)

    if not downloaded_files:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞.")
        return None, None, None

    st.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    all_transcriptions = []
    all_handbooks = []
    all_processed_dirs = []  # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    for file_path in downloaded_files:
        if file_path is None or not os.path.exists(file_path):
            st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª")
            continue

        file_name = Path(file_path).stem
        st.subheader(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        file_dir = os.path.join(save_path, file_name)
        os.makedirs(file_dir, exist_ok=True)
        all_processed_dirs.append(file_dir)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        st.session_state.last_processed_dir = file_dir
        st.session_state.processed_dirs.append(file_dir)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
        try:
            audio = audio_info(file_path)
            st.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration_seconds / 60:.2f} –º–∏–Ω.")
            st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio.frame_rate} –ì—Ü")
            st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio.channels}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
            continue

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
        with st.spinner(f"–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {file_name}..."):
            start_time = time.time()
            try:
                transcription, original_language = transcribe_audio_whisper(
                    audio_path=file_path,
                    file_title=file_name,
                    save_folder_path=TEMP_FILES_DIR  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                )
                transcription = utils.format_transcription_paragraphs(transcription)
                elapsed_time = time.time() - start_time
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
                continue

        st.success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –ø–∞–ø–∫—É —Ñ–∞–π–ª–∞
        if save_txt:
            original_txt_path = os.path.join(file_dir, f"Original_{file_name}.txt")
            with open(original_txt_path, "w", encoding="utf-8") as f:
                f.write(transcription)
            st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_txt_path}")

        if save_docx:
            original_docx_path = os.path.join(file_dir, f"Original_{file_name}.docx")
            save_text_to_docx(transcription, original_docx_path)
            st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_docx_path}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        all_transcriptions.append((file_name, transcription, transcription))  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤ –≤ –∫–æ–¥—ã –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        lang_map = {"—Ä—É—Å—Å–∫–∏–π": "ru", "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
        lang_code_to_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
                            "ja": "—è–ø–æ–Ω—Å–∫–∏–π", "zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π", "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
                            "de": "–Ω–µ–º–µ—Ü–∫–∏–π", "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
        orig_lang_code = original_language.lower() if original_language else "unknown"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
        if orig_lang_code == "unknown" or orig_lang_code not in ["ru", "kk", "en", "ko", "ja", "zh"]:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            orig_lang_code = utils.detect_language(transcription)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
        target_lang_code = lang_map.get(target_language.lower(), "ru")

        # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å —è–∑—ã–∫–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
        need_translate = orig_lang_code != target_lang_code
        translated_text = transcription  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        orig_lang_name = lang_code_to_name.get(orig_lang_code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({orig_lang_code})")
        st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {orig_lang_name}")

        if need_translate:
            with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {file_name} —Å {orig_lang_name} –Ω–∞ {target_language}..."):
                translated_text = utils.translate_text_gpt(transcription, target_language)
            st.success(f"–ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞ {file_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
            all_transcriptions[-1] = (file_name, transcription, translated_text)
        else:
            st.info(f"–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ({orig_lang_name}) –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º ({target_language}). –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
        if save_txt:
            trans_txt_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.txt")
            with open(trans_txt_path, "w", encoding="utf-8") as f:
                f.write(translated_text)
            st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_txt_path}")

        if save_docx:
            trans_docx_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.docx")
            save_text_to_docx(translated_text, trans_docx_path)
            st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_docx_path}")

        # –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
        st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
        st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª", transcription, height=200)
        st.subheader(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {target_language.capitalize()}")
        st.text_area("–ü–µ—Ä–µ–≤–æ–¥", translated_text, height=200)

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
        handbook_text = None
        if create_handbook_option:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Conspect_"
            try:
                handbook_text, md_processed_text = create_handbook(translated_text, file_dir, file_name, target_language, save_txt, save_docx)
                all_handbooks.append((file_name, handbook_text, md_processed_text))
                st.success(f"–ö–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {str(e)}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            create_download_buttons(file_dir)

    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º ZIP-–∞—Ä—Ö–∏–≤–µ
    if len(all_processed_dirs) > 1:
        st.header("üì¶ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

        try:
            # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏
            zip_buffer = BytesIO()

            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                for dir_path in all_processed_dirs:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏)
                    dir_name = os.path.basename(dir_path)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∞—Ä—Ö–∏–≤
                    for file_name in os.listdir(dir_path):
                        file_path = os.path.join(dir_path, file_name)
                        if os.path.isfile(file_path):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º, –≤–∫–ª—é—á–∞—é—â–∏–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                            arc_name = os.path.join(dir_name, file_name)
                            zip_file.write(file_path, arcname=arc_name)

            zip_buffer.seek(0)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º –∞—Ä—Ö–∏–≤–µ",
                data=zip_buffer,
                file_name="yandex_disk_results.zip",
                mime="application/zip",
                key=f"download_all_yandex_results"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞: {str(e)}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if len(all_transcriptions) > 0:
        st.session_state.last_processed_dir = all_processed_dirs[0]
    if all_processed_dirs[0] not in st.session_state.processed_dirs:
        st.session_state.processed_dirs.append(all_processed_dirs[0])
    st.session_state.process_completed = True

    if create_handbook_option and len(all_handbooks) > 0:
        return all_transcriptions[0][1], all_handbooks[0][1], all_handbooks[0][2]
    else:
        return all_transcriptions[0][1], None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Drive —Ñ–∞–π–ª–æ–≤
def process_gdrive_files(url, save_path, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Å Google Drive

    Args:
        url: URL –Ω–∞ Google Drive (—Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É)
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        save_txt: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ TXT
        save_docx: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DOCX
        create_handbook_option: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç

    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –∫–æ–Ω—Å–ø–µ–∫—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    """
    downloader = GoogleDriveDownloader(output_dir=AUDIO_FILES_DIR)
    if not downloader.is_gdrive_url(url):
        st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Drive.")
        return None, None, None

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    progress_bar = st.progress(0)
    status_text = st.empty()

    def update_progress(percent, message):
        progress_bar.progress(int(percent) / 100)
        status_text.text(message)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å Google Drive
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å Google Drive..."):
        downloaded_files = downloader.process_gdrive_url(url, progress_callback=update_progress)

    if not downloaded_files:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Å Google Drive.")
        return None, None, None

    st.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    all_transcriptions = []
    all_handbooks = []
    all_processed_dirs = []  # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    for file_path in downloaded_files:
        file_name = Path(file_path).stem
        st.subheader(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        file_dir = os.path.join(save_path, file_name)
        os.makedirs(file_dir, exist_ok=True)
        all_processed_dirs.append(file_dir)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        st.session_state.last_processed_dir = file_dir
        st.session_state.processed_dirs.append(file_dir)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
        try:
            audio = audio_info(file_path)
            st.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration_seconds / 60:.2f} –º–∏–Ω.")
            st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio.frame_rate} –ì—Ü")
            st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio.channels}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
            continue

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
        with st.spinner(f"–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {file_name}..."):
            start_time = time.time()
            try:
                transcription, original_language = transcribe_audio_whisper(
                    audio_path=file_path,
                    file_title=file_name,
                    save_folder_path=TEMP_FILES_DIR  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                )
                transcription = utils.format_transcription_paragraphs(transcription)
                elapsed_time = time.time() - start_time
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
                continue

        st.success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç!")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –ø–∞–ø–∫—É —Ñ–∞–π–ª–∞
        if save_txt:
            original_txt_path = os.path.join(file_dir, f"Original_{file_name}.txt")
            with open(original_txt_path, "w", encoding="utf-8") as f:
                f.write(transcription)
            st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_txt_path}")

        if save_docx:
            original_docx_path = os.path.join(file_dir, f"Original_{file_name}.docx")
            save_text_to_docx(transcription, original_docx_path)
            st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_docx_path}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫
        all_transcriptions.append((file_name, transcription))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤ –≤ –∫–æ–¥—ã –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        lang_map = {"—Ä—É—Å—Å–∫–∏–π": "ru", "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
        lang_code_to_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
                            "ja": "—è–ø–æ–Ω—Å–∫–∏–π", "zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π", "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
                            "de": "–Ω–µ–º–µ—Ü–∫–∏–π", "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
        orig_lang_code = original_language.lower() if original_language else "unknown"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
        if orig_lang_code == "unknown" or orig_lang_code not in ["ru", "kk", "en", "ko", "ja", "zh"]:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            orig_lang_code = utils.detect_language(transcription)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
        target_lang_code = lang_map.get(target_language.lower(), "ru")

        # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å —è–∑—ã–∫–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
        need_translate = orig_lang_code != target_lang_code
        translated_text = transcription  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        orig_lang_name = lang_code_to_name.get(orig_lang_code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({orig_lang_code})")
        st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {orig_lang_name}")

        if need_translate:
            with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {file_name} —Å {orig_lang_name} –Ω–∞ {target_language}..."):
                translated_text = utils.translate_text_gpt(transcription, target_language)
            st.success(f"–ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞ {file_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
        else:
            st.info(f"–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ({orig_lang_name}) –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º ({target_language}). –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
        if save_txt:
            trans_txt_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.txt")
            with open(trans_txt_path, "w", encoding="utf-8") as f:
                f.write(translated_text)
            st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_txt_path}")

        if save_docx:
            trans_docx_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.docx")
            save_text_to_docx(translated_text, trans_docx_path)
            st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_docx_path}")

        # –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
        st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
        st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª", transcription, height=200)
        st.subheader(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {target_language.capitalize()}")
        st.text_area("–ü–µ—Ä–µ–≤–æ–¥", translated_text, height=200)

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
        handbook_text = None
        if create_handbook_option:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Conspect_"
            try:
                handbook_text, md_processed_text = create_handbook(translated_text, file_dir, file_name, target_language, save_txt, save_docx)
                all_handbooks.append((file_name, handbook_text, md_processed_text))
                st.success(f"–ö–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞: {str(e)}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
            create_download_buttons(file_dir)

    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º ZIP-–∞—Ä—Ö–∏–≤–µ
    if len(all_processed_dirs) > 1:
        st.header("üì¶ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

        try:
            # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –≤ –ø–∞–º—è—Ç–∏
            zip_buffer = BytesIO()

            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                for dir_path in all_processed_dirs:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏)
                    dir_name = os.path.basename(dir_path)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∞—Ä—Ö–∏–≤
                    for file_name in os.listdir(dir_path):
                        file_path = os.path.join(dir_path, file_name)
                        if os.path.isfile(file_path):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º, –≤–∫–ª—é—á–∞—é—â–∏–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                            arc_name = os.path.join(dir_name, file_name)
                            zip_file.write(file_path, arcname=arc_name)

            zip_buffer.seek(0)  # –ø–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω–æ–º –∞—Ä—Ö–∏–≤–µ",
                data=zip_buffer,
                file_name="google_drive_results.zip",
                mime="application/zip",
                key=f"download_all_gdrive_results"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞: {str(e)}")

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
    # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
    if create_handbook_option and len(all_handbooks) > 0:
        transcription = all_transcriptions[0][1] if len(all_transcriptions) > 0 else None
        return transcription, all_handbooks[0][1], all_handbooks[0][2]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if len(all_transcriptions) > 0:
        st.session_state.last_processed_dir = all_processed_dirs[0]
    if all_processed_dirs[0] not in st.session_state.processed_dirs:
        st.session_state.processed_dirs.append(all_processed_dirs[0])
    st.session_state.process_completed = True

    if create_handbook_option and len(all_handbooks) > 0:
        return all_transcriptions[0][1], all_handbooks[0][1], all_handbooks[0][2]
    else:
        return all_transcriptions[0][1], None, None

def process_vk_video(url, save_path, target_language, save_txt=True, save_docx=True, create_handbook_option=False):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

    Args:
        url: URL –Ω–∞ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        save_txt: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ TXT
        save_docx: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DOCX
        create_handbook_option: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç

    Returns:
        –ö–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –∫–æ–Ω—Å–ø–µ–∫—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    """
    downloader = VKVideoDownloader(output_dir=AUDIO_FILES_DIR)
    if not downloader.is_vk_url(url):
        st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.")
        return None, None, None

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    url = downloader.normalize_vk_url(url)
    video_id = downloader.get_video_id(url) or "video"
    file_name = f"vk_video_{video_id}"

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    file_dir = os.path.join(save_path, file_name)
    os.makedirs(file_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    st.session_state.last_processed_dir = file_dir
    st.session_state.processed_dirs.append(file_dir)

    progress_bar = st.progress(0)
    status_text = st.empty()
    def update_progress(percent, message):
        progress_bar.progress(int(percent) / 100)
        status_text.text(message)

    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ..."):
        audio_file = downloader.download_audio(
            url=url,
            output_filename=file_name,
            progress_callback=update_progress
        )

    if not audio_file:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.")
        return None, None, None

    st.success(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio_file}")
    audio = audio_info(audio_file)
    st.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {audio.duration_seconds / 60:.2f} –º–∏–Ω.")
    st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {audio.frame_rate} –ì—Ü")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {audio.channels}")

    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é..."):
        start_time = time.time()
        transcription, original_language = transcribe_audio_whisper(
            audio_path=audio_file,
            file_title=file_name,
            save_folder_path=TEMP_FILES_DIR  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        )
        transcription = utils.format_transcription_paragraphs(transcription)
        elapsed_time = time.time() - start_time

    st.success(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time / 60:.2f} –º–∏–Ω—É—Ç!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –ø–∞–ø–∫—É —Ñ–∞–π–ª–∞
    if save_txt:
        original_txt_path = os.path.join(file_dir, f"Original_{file_name}.txt")
        with open(original_txt_path, "w", encoding="utf-8") as f:
            f.write(transcription)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_txt_path}")

    if save_docx:
        original_docx_path = os.path.join(file_dir, f"Original_{file_name}.docx")
        save_text_to_docx(transcription, original_docx_path)
        st.success(f"–û—Ä–∏–≥–∏–Ω–∞–ª Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_docx_path}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤ –≤ –∫–æ–¥—ã –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    lang_map = {"—Ä—É—Å—Å–∫–∏–π": "ru", "–∫–∞–∑–∞—Ö—Å–∫–∏–π": "kk", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en"}
    lang_code_to_name = {"ru": "—Ä—É—Å—Å–∫–∏–π", "kk": "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "ko": "–∫–æ—Ä–µ–π—Å–∫–∏–π",
                        "ja": "—è–ø–æ–Ω—Å–∫–∏–π", "zh": "–∫–∏—Ç–∞–π—Å–∫–∏–π", "es": "–∏—Å–ø–∞–Ω—Å–∫–∏–π", "fr": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
                        "de": "–Ω–µ–º–µ—Ü–∫–∏–π", "it": "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "pt": "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π"}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
    orig_lang_code = original_language.lower() if original_language else "unknown"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
    if orig_lang_code == "unknown" or orig_lang_code not in ["ru", "kk", "en", "ko", "ja", "zh"]:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        orig_lang_code = utils.detect_language(transcription)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞
    target_lang_code = lang_map.get(target_language.lower(), "ru")

    # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å —è–∑—ã–∫–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
    need_translate = orig_lang_code != target_lang_code
    translated_text = transcription  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    orig_lang_name = lang_code_to_name.get(orig_lang_code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({orig_lang_code})")
    st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {orig_lang_name}")

    if need_translate:
        with st.spinner(f"–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —Å {orig_lang_name} –Ω–∞ {target_language}..."):
            translated_text = utils.translate_text_gpt(transcription, target_language)
        st.success(f"–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        st.info(f"–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ({orig_lang_name}) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º ({target_language}). –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
    if save_txt:
        trans_txt_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.txt")
        with open(trans_txt_path, "w", encoding="utf-8") as f:
            f.write(translated_text)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π TXT —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_txt_path}")

    if save_docx:
        trans_docx_path = os.path.join(file_dir, f"{target_language.capitalize()}_{file_name}.docx")
        save_text_to_docx(translated_text, trans_docx_path)
        st.success(f"–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π Word —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {trans_docx_path}")

    # –í—ã–≤–æ–¥–∏–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")
    st.text_area("–û—Ä–∏–≥–∏–Ω–∞–ª", transcription, height=200)
    st.subheader(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {target_language.capitalize()}")
    st.text_area("–ü–µ—Ä–µ–≤–æ–¥", translated_text, height=200)

    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
    handbook_text = None
    if create_handbook_option:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Conspect_"
        handbook_text, md_processed_text = create_handbook(translated_text, file_dir, file_name, target_language, save_txt, save_docx)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, handbook_text, md_processed_text
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
        create_download_buttons(file_dir)
        st.session_state.last_processed_dir = file_dir
        if file_dir not in st.session_state.processed_dirs:
            st.session_state.processed_dirs.append(file_dir)
        st.session_state.process_completed = True
        return transcription, None, None

# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é —á–µ—Ä–µ–∑ Streamlit secrets ---
def check_password():
    """Returns True if the user entered the correct password."""
    if "password_correct" in st.session_state:
        return st.session_state.password_correct
    import hmac
    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if hmac.compare_digest(st.session_state.password, st.secrets.get("PASSWORD", "default_password")):
            st.session_state.password_correct = True
            del st.session_state.password  # –ù–µ —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Å—Å–∏–∏
        else:
            st.session_state.password_correct = False
    st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é", 
        type="password",
        key="password",
        on_change=password_entered
    )
    if "password_correct" in st.session_state:
        if not st.session_state.password_correct:
            st.error("üòï –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return False
    return False

# –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if not check_password():
    st.stop()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ")
    st.markdown("### –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI Whisper API")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ
    if st.session_state.process_completed and st.session_state.last_processed_dir:
        st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        create_download_buttons(st.session_state.last_processed_dir)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤—ã–±—Ä–∞—Ç—å
        if len(st.session_state.processed_dirs) > 1:
            with st.expander("–î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                for dir_path in st.session_state.processed_dirs:
                    if dir_path != st.session_state.last_processed_dir:
                        if st.button(f"üìÇ –ü–æ–∫–∞–∑–∞—Ç—å {os.path.basename(dir_path)}", key=f"show_{os.path.basename(dir_path)}"):
                            st.session_state.last_processed_dir = dir_path
                            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –æ–ø—Ü–∏–π
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.subheader("–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        target_language = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:",
            ["—Ä—É—Å—Å–∫–∏–π", "–∫–∞–∑–∞—Ö—Å–∫–∏–π", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"],
            index=0
        )

        # –£–¥–∞–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        st.subheader("–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        save_dir = TRANSCRIPTIONS_DIR

        st.subheader("–û–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        save_txt = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ TXT", value=False)
        save_docx = True  # DOCX –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        create_handbook = True  # –ö–æ–Ω—Å–ø–µ–∫—Ç –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π
        if st.session_state.process_completed:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                st.session_state.process_completed = False
                st.session_state.last_processed_dir = None
                st.session_state.processed_dirs = []
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
                st.rerun()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π VK video
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã",
        "YouTube",
        "VK –≤–∏–¥–µ–æ",
        "Instagram",
        "–Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫",
        "Google –î–∏—Å–∫"
    ])

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    with tab1:
        st.header("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã",
            type=["mp3", "mp4", "wav", "m4a", "avi", "mov"],
            accept_multiple_files=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        )

        if uploaded_files:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")

            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", expanded=False):
                for i, uploaded_file in enumerate(uploaded_files):
                    st.subheader(f"–§–∞–π–ª #{i+1}: {uploaded_file.name}")
                    if uploaded_file.type.startswith('audio/') or uploaded_file.name.endswith(('.mp3', '.wav', '.m4a')):
                        st.audio(uploaded_file)
                    elif uploaded_file.type.startswith('video/') or uploaded_file.name.endswith(('.mp4', '.avi', '.mov')):
                        st.video(uploaded_file)

            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏
                    for i, uploaded_file in enumerate(uploaded_files):
                        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                        if i > 0:
                            st.markdown("---")

                        st.subheader(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1}/{len(uploaded_files)}: {uploaded_file.name}")

                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                        file_name = Path(uploaded_file.name).stem

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        process_uploaded_file(
                            uploaded_file,
                            save_dir,
                            file_name,
                            target_language,
                            save_txt=save_txt,
                            save_docx=True,
                            create_handbook_option=True
                        )

                    st.success(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(uploaded_files)}")

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è YouTube
    with tab2:
        st.header("YouTube –≤–∏–¥–µ–æ")
        youtube_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ", key="youtube_url")
        if youtube_url:
            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å YouTube –≤–∏–¥–µ–æ"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    process_youtube_video(
                        youtube_url,
                        save_dir,
                        target_language,
                        save_txt=save_txt,
                        save_docx=True,
                        create_handbook_option=True
                    )

    # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è VK –≤–∏–¥–µ–æ
    with tab3:
        st.header("VK –≤–∏–¥–µ–æ")
        vk_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", key="vk_url")

        st.info("""
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å—Å—ã–ª–æ–∫:
        - –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ: https://vk.com/video-220754053_456243260
        - –°—Å—ã–ª–∫–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞: https://vk.com/vkvideo?z=video-220754053_456243260%2Fvideos-220754053%2Fpl_-220754053_-2
        """)

        if vk_url:
            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å VK –≤–∏–¥–µ–æ"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    process_vk_video(
                        vk_url,
                        save_dir,
                        target_language,
                        save_txt=save_txt,
                        save_docx=True,
                        create_handbook_option=True
                    )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è Instagram
    with tab4:
        st.header("Instagram –≤–∏–¥–µ–æ")
        instagram_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram –≤–∏–¥–µ–æ –ø–æ—Å—Ç–∞ –∏–ª–∏ reels", key="instagram_url")

        if instagram_url:
            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å Instagram –≤–∏–¥–µ–æ"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    process_instagram_video(
                        instagram_url,
                        save_dir,
                        target_language,
                        save_txt=save_txt,
                        save_docx=True,
                        create_handbook_option=True
                    )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫
    with tab5:
        st.header("–Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫")
        yandex_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–µ", key="yandex_url")

        if yandex_url:
            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    process_yandex_disk_files(
                        yandex_url,
                        save_dir,
                        target_language,
                        save_txt=save_txt,
                        save_docx=True,
                        create_handbook_option=True
                    )

    # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è Google –î–∏—Å–∫
    with tab6:
        st.header("Google –î–∏—Å–∫")
        gdrive_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –Ω–∞ Google –î–∏—Å–∫–µ", key="gdrive_url")

        st.info("""
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å—Å—ã–ª–æ–∫:
        - –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã: https://drive.google.com/file/d/FILE_ID/view
        - –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–ø–∫–∏: https://drive.google.com/drive/folders/FOLDER_ID

        –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å—Å—ã–ª–∫–µ.
        """)

        if gdrive_url:
            if st.button("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å Google Drive"):
                if not openai.api_key:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    process_gdrive_files(
                        gdrive_url,
                        save_dir,
                        target_language,
                        save_txt=save_txt,
                        save_docx=True,
                        create_handbook_option=True
                    )

if __name__ == "__main__":
    main()
